
Функция ДокументыПолучить(Запрос)
	
	ИД_ТСД = Запрос.ПараметрыЗапроса.Получить("id");
	ТипДокумента = Запрос.ПараметрыЗапроса.Получить("type");
		
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , ИД_ТСД + Символы.ПС + ТипДокумента,
		"Начало получения документов"+Символы.ПС+"В поле данные содержится идентификатор ТСД и тип документа");
	
	Ответ = Новый HTTPСервисОтвет(200);
	СтруктураJSON = Новый Структура("Склады");
	Отбор = Новый Структура("ИД_ТСД, ТипДокумента", ИД_ТСД, ТипДокумента);	
	Ответ.УстановитьТелоИзСтроки(ПолучитьСтруктуруДанныхJSON(СтруктураJSON, Отбор));
	
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , Ответ.ПолучитьТелоКакСтроку(),
		"Окончание получения документов"+Символы.ПС+"В поле данные содержится JSON");
	
	Возврат Ответ;
	
КонецФункции

Функция ДокументыОтправить(Запрос)
	ИД_ТСД = Запрос.ПараметрыЗапроса.Получить("id");
	ТипДокумента = Запрос.ПараметрыЗапроса.Получить("type");
	ИД_Документа = Запрос.ПараметрыЗапроса.Получить("documentid");
		
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , ИД_ТСД + Символы.ПС + ТипДокумента,
		"Начало отправки документов"+Символы.ПС+"В поле данные содержится идентификатор ТСД и тип документа");
			
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		Если ПрочитатьДанныеJSON(СтрокаJSON) Тогда
			КодОтвета = РазблокироватьДокумент(ИД_ТСД, ТипДокумента, ИД_Документа);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИД_Документа) Тогда
		КодОтвета = ПроверитьЗаблокироватьДокумент(ИД_ТСД, ТипДокумента, ИД_Документа);
	Иначе
		КодОтвета = 500;
		СтруктураJSON = Новый Структура();
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	Если ЗначениеЗаполнено(СтруктураJSON) Тогда
		//Ответ.УстановитьТелоИзСтроки(ПолучитьСтруктуруДанныхJSON(СтруктураJSON, Отбор));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , Ответ.ПолучитьТелоКакСтроку(),
		"Окончание отправки документов"+Символы.ПС+"В поле данные содержится JSON");
	
	Возврат Ответ;
КонецФункции

Функция СправочникиПолучить(Запрос)
	
	ИД_ТСД = Запрос.ПараметрыЗапроса.Получить("id");
	ТолькоСклады = (Запрос.ПараметрыЗапроса.Получить("onlywarehouses") = XMLСтрока(Истина));
	ШтрихкодыСтрока = РаскодироватьСтроку(Запрос.ПараметрыЗапроса.Получить("barcodes"), СпособКодированияСтроки.КодировкаURL);
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(ШтрихкодыСтрока);
	Штрихкоды = ПрочитатьJSON(ЧтениеJSON);
	
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , ИД_ТСД + Символы.ПС + ТолькоСклады + Символы.ПС + ШтрихкодыСтрока,
		"Начало получения справочников"+Символы.ПС+"В поле данные содержится идентификатор ТСД, Штрихкоды и признак получения складов");
	
	Ответ = Новый HTTPСервисОтвет(200);
	СтруктураJSON = Новый Структура;
	Если ТолькоСклады Тогда 
		СтруктураJSON.Вставить("Склады");
	КонецЕсли;
	Отбор = Новый Структура("ИД_ТСД, Штрихкоды", ИД_ТСД, Штрихкоды);
	Ответ.УстановитьТелоИзСтроки(ПолучитьСтруктуруДанныхJSON(СтруктураJSON, Отбор));
	
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , Ответ.ПолучитьТелоКакСтроку(),
		"Окончание получения справочников"+Символы.ПС+"В поле данные содержится JSON");

	Возврат Ответ;
КонецФункции

Функция ТестПолучить(Запрос)
	ИД_ТСД = Запрос.ПараметрыЗапроса.Получить("id");
	ЗаписьЖурналаРегистрации("Обмен с ТСД", УровеньЖурналаРегистрации.Информация, , ИД_ТСД, 
		"Тестироване соединения"+Символы.ПС+"В поле данные содержится идентификатор ТСД");
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

// Выполняет проверку состояния обработки документа на ТСД.
//
// Параметры:
//
//	ИД_ТСД - Строка - уникальный идентификатор ТСД строкой
//	ТипДокумента - Строка - РасходныйОрдер, ПриходныйОрдер, ПересчетТоваров
//	ИД_Документа - Строка - уникальный идентификатор Документа строкой
//
// Возвращаемое значение
//  Истина - документ заблокирован, Ложь - документ заблокирован другим ТСД
//
Функция ПроверитьЗаблокироватьДокумент(ИД_ТСД, ТипДокумента, ИД_Документа)
	Результат = 500;
	Если ТипДокумента = "РасходныйОрдер" Тогда
		ИмяМетаданныхДокумента = "РасходныйОрдерНаТовары";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыРасходныхОрдеров.ВПроцессеПроверки);
	ИначеЕсли ТипДокумента = "ПриходныйОрдер" Тогда
		ИмяМетаданныхДокумента = "ПриходныйОрдерНаТовары";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыПриходныхОрдеров.ВРаботе);
	ИначеЕсли ТипДокумента = "ПересчетТоваров" Тогда
		ИмяМетаданныхДокумента = "ПересчетТоваров";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыПересчетовТоваров.ВРаботе);
	КонецЕсли;
	Документ = Документы[ИмяМетаданныхДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
	Если ЗначениеЗаполнено(Документ) Тогда 
		ИД_ТСДБлокировки = УправлениеСвойствами.ЗначениеСвойства(Документ, "ИД_ТСД_0d1b649d93a64607aa8ecccbfcfcdf43");
		Если НЕ ЗначениеЗаполнено(ИД_ТСДБлокировки) ИЛИ ИД_ТСДБлокировки = ИД_ТСД Тогда
			ТаблицаЗначенийСвойств = Новый ТаблицаЗначений;
			ТаблицаЗначенийСвойств.Колонки.Добавить("Свойство");
			ТаблицаЗначенийСвойств.Колонки.Добавить("Значение");
			НовоеСвойство = ТаблицаЗначенийСвойств.Добавить();
			НовоеСвойство.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИД_ТСД_0d1b649d93a64607aa8ecccbfcfcdf43");
			НовоеСвойство.Значение = ИД_ТСД;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Документ, ТаблицаЗначенийСвойств);
			ДокументОбъект = Документ.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураРеквизитов);
			ДокументОбъект.Записать();
			Результат = 202;
		Иначе
			Результат = 403;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выполняет проверку состояния обработки документа на ТСД.
//
// Параметры:
//
//	ИД_ТСД - Строка - уникальный идентификатор ТСД строкой
//	ТипДокумента - Строка - РасходныйОрдер, ПриходныйОрдер, ПересчетТоваров
//	ИД_Документа - Строка - уникальный идентификатор Документа строкой
//
// Возвращаемое значение
//  Истина - документ заблокирован, Ложь - документ заблокирован другим ТСД
//
Функция РазблокироватьДокумент(ИД_ТСД, ТипДокумента, ИД_Документа)
	Результат = 500;
	Если ТипДокумента = "РасходныйОрдер" Тогда
		ИмяМетаданныхДокумента = "РасходныйОрдерНаТовары";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыРасходныхОрдеров.Проверен);
	ИначеЕсли ТипДокумента = "ПриходныйОрдер" Тогда
		ИмяМетаданныхДокумента = "ПриходныйОрдерНаТовары";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка);
	ИначеЕсли ТипДокумента = "ПересчетТоваров" Тогда
		ИмяМетаданныхДокумента = "ПересчетТоваров";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов);
	ИначеЕсли ТипДокумента = "ЗаказКлиента" Тогда 
		ИмяМетаданныхДокумента = "ЗаказКлиента";
		СтруктураРеквизитов = Новый Структура("Статус", Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
		Возврат 200;
	КонецЕсли;
	Документ = Документы[ИмяМетаданныхДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
	Если Документ.ПолучитьОбъект() <> Неопределено Тогда 
		ИД_ТСДБлокировки = УправлениеСвойствами.ЗначениеСвойства(Документ, "ИД_ТСД_0d1b649d93a64607aa8ecccbfcfcdf43");
		Если ИД_ТСДБлокировки = ИД_ТСД Тогда
			ТаблицаЗначенийСвойств = Новый ТаблицаЗначений;
			ТаблицаЗначенийСвойств.Колонки.Добавить("Свойство");
			ТаблицаЗначенийСвойств.Колонки.Добавить("Значение");
			НовоеСвойство = ТаблицаЗначенийСвойств.Добавить();
			НовоеСвойство.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИД_ТСД_0d1b649d93a64607aa8ecccbfcfcdf43");
			НовоеСвойство.Значение = "";
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Документ, ТаблицаЗначенийСвойств);
			ДокументОбъект = Документ.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураРеквизитов);
			ДокументОбъект.Записать();
			Результат = 200;
		Иначе
			Результат = 403;
		КонецЕсли;
	Иначе
		Результат = 404;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выполняет формирование таблицы данных по складам для передачи на клиент ТСД.
//
// Параметры:
//
// Возвращаемое значение
// ТаблицаЗначений - содержит структуру данных по складам для передачи на клиент ТСД.
//		"Ссылка"
//		"ПометкаУдаления"
//		"Наименование"
//
Функция ПолучитьДанныеСклады()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Заголовок = ""Используется ТСД""
	|	И ДополнительныеСведения.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Склады.Склад.Ссылка КАК Ссылка,
	|	ВТ_Склады.Склад.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_Склады.Склад.Наименование КАК Наименование
	|ИЗ
	|	ВТ_Склады КАК ВТ_Склады";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ТаблицаСклады = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСклады;
	
КонецФункции

// Выполняет формирование структуры данных по номенклатуре для передачи на клиент ТСД.
//
// Параметры:
//
//	Отбор - Структура - Штрихкоды - Строка или Масссив строк, содеражщий значений штрихкодов товаров для отбора
//
// Возвращаемое значение
// Структура - содержит структуру данных по номенклатуре для передачи на клиент ТСД.
//		"ВидыНоменклатуры"
//		"Номенклатура"
//		"ХарактеристикиНоменклатуры"
//		"ШтрихкодыНоменклатуры"
//
Функция ПолучитьДанныеНоменклатура(Отбор)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК ОтборШтрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК ОтборНоменклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК ОтборХарактеристика
	|ПОМЕСТИТЬ ВТ_ОтборНоменклатураХарактеристикаШтрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.ВидНоменклатуры КАК Ссылка,
	|	Номенклатура.ВидНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	Номенклатура.ВидНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод КАК ВТ_ОтборНоменклатураХарактеристикаШтрихкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборНоменклатура = Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик
	|ИЗ
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод КАК ВТ_ОтборНоменклатураХарактеристикаШтрихкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	|			И ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборНоменклатура = Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ""Номенклатура""
	|		ИНАЧЕ ""ХарактеристикиНоменклатуры""
	|	КОНЕЦ КАК ТипВладельца,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод КАК ВТ_ОтборНоменклатураХарактеристикаШтрихкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборХарактеристика = ХарактеристикиНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборШтрихкод КАК Штрихкод,
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборНоменклатура КАК Номенклатура,
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод.ОтборХарактеристика КАК Характеристика
	|ИЗ
	|	ВТ_ОтборНоменклатураХарактеристикаШтрихкод КАК ВТ_ОтборНоменклатураХарактеристикаШтрихкод";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Штрихкоды", Отбор.Штрихкоды);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоТаблиц = МассивРезультатов.Количество();
	
	ВидыНоменклатуры	  		= МассивРезультатов[КоличествоТаблиц-4].Выгрузить();
	Номенклатура		 		= МассивРезультатов[КоличествоТаблиц-3].Выгрузить();
	ХарактеристикиНоменклатуры	= МассивРезультатов[КоличествоТаблиц-2].Выгрузить();
	ШтрихкодыНоменклатуры 		= МассивРезультатов[КоличествоТаблиц-1].Выгрузить();
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ВидыНоменклатуры", ВидыНоменклатуры);
	СтруктураДанных.Вставить("Номенклатура", Номенклатура);
	СтруктураДанных.Вставить("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	СтруктураДанных.Вставить("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры);

	Возврат СтруктураДанных;
	
КонецФункции

// Выполняет формирование текста запроса по документам для передачи на клиент ТСД.
//
// Параметры:
//
//	ТипДокумента - Строка - РасходныйОрдер, ПриходныйОрдер, ПересчетТоваров
//
// Возвращаемое значение
// Строка - содержит текст запроса по документам для передачи на клиент ТСД.
//
Функция ПолучитьТекстЗапроса(ТипДокумента)

	Если ТипДокумента = "РасходныйОрдер" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТовары.Номер КАК Номер,
		|	РасходныйОрдерНаТовары.ДатаОтгрузки КАК Дата,
		|	РасходныйОрдерНаТовары.Проведен КАК Проведен,
		|	РасходныйОрдерНаТовары.ПометкаУдаления КАК ПометкаУдаления,
		|	РасходныйОрдерНаТовары.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_ЗаказыКлиентов
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО РасходныйОрдерНаТовары.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство.Заголовок = ""ИД_ТСД"")
		|ГДЕ
		|	РасходныйОрдерНаТовары.Склад В(&Склады)
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
		|	И РасходныйОрдерНаТовары.Проведен
		|	И (ДополнительныеСведения.Значение = &ИД_ТСД
		|			ИЛИ ДополнительныеСведения.Значение ЕСТЬ NULL
		|			ИЛИ ДополнительныеСведения.Значение = """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыКлиентов.Ссылка КАК Ссылка,
		|	ВТ_ЗаказыКлиентов.Номер КАК Номер,
		|	ВТ_ЗаказыКлиентов.Дата КАК Дата,
		|	ВТ_ЗаказыКлиентов.Проведен КАК Проведен,
		|	ВТ_ЗаказыКлиентов.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_ЗаказыКлиентов.Склад КАК Склад,
		|	ВТ_ЗаказыКлиентов.Ссылка.ТоварыПоРаспоряжениям.(
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество
		|	) КАК Товары
		|ИЗ
		|	ВТ_ЗаказыКлиентов КАК ВТ_ЗаказыКлиентов"
	ИначеЕсли ТипДокумента = "ПриходныйОрдер" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
		|	ПриходныйОрдерНаТовары.Номер КАК Номер,
		|	ПриходныйОрдерНаТовары.Дата КАК Дата,
		|	ПриходныйОрдерНаТовары.Проведен КАК Проведен,
		|	ПриходныйОрдерНаТовары.ПометкаУдаления КАК ПометкаУдаления,
		|	ПриходныйОрдерНаТовары.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_ПриходыНаСклад
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ПриходныйОрдерНаТовары.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство.Заголовок = ""ИД_ТСД"")
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Склад В(&Склады)
		|	И ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
		|	И (ДополнительныеСведения.Значение = &ИД_ТСД
		|			ИЛИ ДополнительныеСведения.Значение ЕСТЬ NULL
		|			ИЛИ ДополнительныеСведения.Значение = """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПриходыНаСклад.Ссылка КАК Ссылка,
		|	ВТ_ПриходыНаСклад.Номер КАК Номер,
		|	ВТ_ПриходыНаСклад.Дата КАК Дата,
		|	ВТ_ПриходыНаСклад.Проведен КАК Проведен,
		|	ВТ_ПриходыНаСклад.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_ПриходыНаСклад.Склад КАК Склад,
		|	ВТ_ПриходыНаСклад.Ссылка.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество
		|	) КАК Товары
		|ИЗ
		|	ВТ_ПриходыНаСклад КАК ВТ_ПриходыНаСклад";
	ИначеЕсли ТипДокумента = "ПересчетТоваров" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПересчетТоваров.Ссылка КАК Ссылка,
		|	ПересчетТоваров.Номер КАК Номер,
		|	ПересчетТоваров.Дата КАК Дата,
		|	ПересчетТоваров.Проведен КАК Проведен,
		|	ПересчетТоваров.ПометкаУдаления КАК ПометкаУдаления,
		|	ПересчетТоваров.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_ПересчетыТоваров
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ПересчетТоваров.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство.Заголовок = ""ИД_ТСД"")
		|ГДЕ
		|	ПересчетТоваров.Склад В(&Склады)
		|	И ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Подготовлено)
		|	И (ДополнительныеСведения.Значение = &ИД_ТСД
		|			ИЛИ ДополнительныеСведения.Значение ЕСТЬ NULL
		|			ИЛИ ДополнительныеСведения.Значение = """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПересчетыТоваров.Ссылка КАК Ссылка,
		|	ВТ_ПересчетыТоваров.Номер КАК Номер,
		|	ВТ_ПересчетыТоваров.Дата КАК Дата,
		|	ВТ_ПересчетыТоваров.Проведен КАК Проведен,
		|	ВТ_ПересчетыТоваров.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_ПересчетыТоваров.Склад КАК Склад,
		|	ВТ_ПересчетыТоваров.Ссылка.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество,
		|		КоличествоФакт КАК КоличествоФакт
		|	) КАК Товары
		|ИЗ
		|	ВТ_ПересчетыТоваров КАК ВТ_ПересчетыТоваров"
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Выполняет формирование запроса по документам для передачи на клиент ТСД.
//
// Параметры:
//
//	Отбор - Структура - ИД_ТСД - уникальный идентификатор ТСД строкой
//					  ТипДокумента - Строка - РасходныйОрдер, ПриходныйОрдер, ПересчетТоваров
//					  Штрихкоды - Строка или Масссив строк, содеражщий значений штрихкодов товаров для отбора
//
// Возвращаемое значение
// РезультатЗапроса - содержит результат запроса данных для передачи на клиент ТСД.
//
Функция ПолучитьРезультатЗапросаДокументы(Отбор)
	
	ТекстЗапроса = ПолучитьТекстЗапроса(Отбор.ТипДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИД_ТСД",			  Отбор.ИД_ТСД);
	Запрос.УстановитьПараметр("Склады",			  Отбор.Склады);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
		
КонецФункции

// Выполняет формирование структуры данных для передачи на клиент ТСД.
//
// Параметры:
//
//	РезультатЗапроса - ВыборкаИзРезультатаЗапроса
//
// Возвращаемое значение
// Массив - содержит массив штрихкодов для отбора номенклатуры.
//
Функция ПолучитьОтборНоменклатуры(РезультатЗапроса)
	Номенклатура = Новый Массив;
	Характеристика = Новый Массив;
	Для Каждого ЭлементМассива Из РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Товары") Цикл
		Для Каждого СтрокаТовары Из ЭлементМассива Цикл
			Если Номенклатура.Найти(СтрокаТовары.Номенклатура) = Неопределено Тогда 
				Номенклатура.Добавить(СтрокаТовары.Номенклатура);
			КонецЕсли;
			Если Характеристика.Найти(СтрокаТовары.Характеристика) = Неопределено Тогда 
				Характеристика.Добавить(СтрокаТовары.Характеристика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В(&Номенклатура)
	|	И ШтрихкодыНоменклатуры.Характеристика В(&Характеристика)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
КонецФункции

// Выполняет формирование структуры данных для передачи на клиент ТСД.
//
// Параметры:
//
//	СтруктураJSON - Структура - структура содержащая ключи необходимых данных
//	Отбор - Структура - ИД_ТСД - уникальный идентификатор ТСД строкой
//					  ТипДокумента - Строка - РасходныйОрдер, ПриходныйОрдер, ПересчетТоваров
//					  Штрихкоды - Строка или Масссив строк, содеражщий значений штрихкодов товаров для отбора
//
// Возвращаемое значение
// ЗаписьJSON - содержит структуру данных для передачи на клиент ТСД.
//
Функция ПолучитьСтруктуруДанныхJSON(СтруктураJSON, Отбор)
	
	СтрукутраДанных = Новый Структура;
	
	Если СтруктураJSON.Свойство("Склады") Тогда
		Склады = ПолучитьДанныеСклады();
		СтрукутраДанных.Вставить("Склады", ПолучитьМассивСтруктурИзТаблицы(Склады));
		Отбор.Вставить("Склады", Склады.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	Если Отбор.Свойство("ТипДокумента") И Отбор.ТипДокумента <> "ЗаказКлиента" Тогда
		ТипДокумента = Отбор.ТипДокумента;
		РезультатЗапросаДокументы = ПолучитьРезультатЗапросаДокументы(Отбор);
		СтрукутраДанных.Вставить(ТипДокумента, ПолучитьМассивСтруктурИзРезультатаЗапроса(РезультатЗапросаДокументы));
		Отбор.Вставить("Штрихкоды", ПолучитьОтборНоменклатуры(РезультатЗапросаДокументы));
	КонецЕсли;
	Если Отбор.Свойство("Штрихкоды") И ЗначениеЗаполнено(Отбор.Штрихкоды) Тогда
		ДанныеНоменклатура = ПолучитьДанныеНоменклатура(Отбор);
		СтрукутраДанных.Вставить("ВидыНоменклатуры", ПолучитьМассивСтруктурИзТаблицы(ДанныеНоменклатура.ВидыНоменклатуры));
		СтрукутраДанных.Вставить("Номенклатура", ПолучитьМассивСтруктурИзТаблицы(ДанныеНоменклатура.Номенклатура));
		СтрукутраДанных.Вставить("ХарактеристикиНоменклатуры", ПолучитьМассивСтруктурИзТаблицы(ДанныеНоменклатура.ХарактеристикиНоменклатуры));
		СтрукутраДанных.Вставить("ШтрихкодыНоменклатуры", ПолучитьМассивСтруктурИзТаблицы(ДанныеНоменклатура.ШтрихкодыНоменклатуры));
	КонецЕсли;
	
	//расставим в правильном порядке
	//1. Склады (они итак первые)
	Если СтруктураJSON.Свойство("Склады") Тогда
		СтруктураJSON.Вставить("Склады", СтрукутраДанных.Склады);
	КонецЕсли;
	//2. Справочники (Номенклат
	Если СтрукутраДанных.Свойство("ШтрихкодыНоменклатуры") Тогда
		СтруктураJSON.Вставить("ВидыНоменклатуры", СтрукутраДанных.ВидыНоменклатуры);
		СтруктураJSON.Вставить("Номенклатура", СтрукутраДанных.Номенклатура);
		СтруктураJSON.Вставить("ХарактеристикиНоменклатуры", СтрукутраДанных.ХарактеристикиНоменклатуры);
		СтруктураJSON.Вставить("ШтрихкодыНоменклатуры", СтрукутраДанных.ШтрихкодыНоменклатуры);
	КонецЕсли;
	//3. Документы
	Если Отбор.Свойство("ТипДокумента") Тогда
		СтруктураJSON.Вставить(ТипДокумента, СтрукутраДанных[ТипДокумента]);
	КонецЕсли;
	
	НоваяЗаписьJSON = Новый ЗаписьJSON();
	НоваяЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(НоваяЗаписьJSON, СтруктураJSON);
	Возврат НоваяЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПрочитатьДанныеJSON(СтрокаJSON)
	Результат = Ложь;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		СтруктураДанных = ПрочитатьJSON(ЧтениеJSON,,"Дата");
		Для Каждого КлючИЗначение Из СтруктураДанных Цикл
			Если КлючИЗначение.Ключ = "ПриходныйОрдер" Тогда
				ЗагрузитьПриходныйОрдер(КлючИЗначение.Значение);
			ИначеЕсли КлючИЗначение.Ключ = "РасходныйОрдер" Тогда
				ЗагрузитьРасходныйОрдер(КлючИЗначение.Значение);
			ИначеЕсли КлючИЗначение.Ключ = "ПересчетТоваров" Тогда
				ЗагрузитьПересчетТоваров(КлючИЗначение.Значение);
			ИначеЕсли КлючИЗначение.Ключ = "ЗаказКлиента" Тогда
				ЗагрузитьЗаказКлиента(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		Результат = Истина;
	Исключение
	КонецПопытки;
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьРасходныйОрдер(МассивДанных)
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Если СтруктураДанных.Свойство("Ссылка") Тогда 
			НужноЗаписыватьОбъект = Ложь;
			Объект = НайтиДокумент("РасходныйОрдерНаТовары", СтруктураДанных);
			Если Объект <> Неопределено Тогда
				ЗаполнитьТабличнуюЧастьОбъекта(Объект.ОтгружаемыеТовары, СтруктураДанных.ОтгружаемыеТовары, НужноЗаписыватьОбъект);
				Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Объект);
				ЗаписатьДокумент(Объект, СтруктураДанных, НужноЗаписыватьОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЗаказКлиента(МассивДанных)
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Если СтруктураДанных.Свойство("Ссылка") Тогда 
			НужноЗаписыватьОбъект = Ложь;
			Объект = НайтиСоздатьДокумент("ЗаказКлиента", СтруктураДанных, НужноЗаписыватьОбъект);
			Если Объект <> Неопределено Тогда
				Объект.Заполнить(Неопределено);
				ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, ,"Номер");
				ЗаполнитьТабличнуюЧастьОбъекта(Объект.Товары, СтруктураДанных.Товары, НужноЗаписыватьОбъект);
				//Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Объект);
				Если НужноЗаписыватьОбъект Тогда
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован");
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	ДополнительныеСведения.Объект КАК Партнер
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|ГДЕ
					|   ДополнительныеСведения.Значение = ИСТИНА
					|	И ДополнительныеСведения.Свойство.Имя = ""ПартнерДляТСД"""
					;
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Объект.Партнер = Выборка.Партнер;
						ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
					КонецЕсли;
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	ДополнительныеСведения.Объект КАК Соглашение
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|ГДЕ
					|   ДополнительныеСведения.Значение = ИСТИНА
					|	И ДополнительныеСведения.Свойство.Имя = ""СоглашениеДляТСД"""
					;
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Объект.Соглашение = Выборка.Соглашение;
						Объект.ЗаполнитьУсловияПродажПоСоглашению();
					КонецЕсли;
				КонецЕсли;
				ЗаписатьДокумент(Объект, СтруктураДанных, НужноЗаписыватьОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПриходныйОрдер(МассивДанных)
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Если СтруктураДанных.Свойство("Ссылка") Тогда 
			НужноЗаписыватьОбъект = Ложь;
			Объект = НайтиДокумент("ПриходныйОрдерНаТовары", СтруктураДанных);
			Если Объект <> Неопределено Тогда
				ЗаполнитьТабличнуюЧастьОбъекта(Объект.Товары, СтруктураДанных.Товары, НужноЗаписыватьОбъект);
				//Документы.ПриходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Объект);
				ЗаписатьДокумент(Объект, СтруктураДанных, НужноЗаписыватьОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПересчетТоваров(МассивДанных)
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Если СтруктураДанных.Свойство("Ссылка") Тогда 
			НужноЗаписыватьОбъект = Ложь;
			Объект = НайтиДокумент("ПересчетТоваров", СтруктураДанных);
			ЗаполнитьТабличнуюЧастьОбъекта(Объект.Товары, СтруктураДанных.Товары, НужноЗаписыватьОбъект); 
			ЗаписатьДокумент(Объект, СтруктураДанных, НужноЗаписыватьОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКлючИЗначение(Знач Ключ, Знач Источник, СтруктураДанных, JSON)
	
	ИсходноеЗначение = Источник[Ключ]; 
	Попытка
		Значение = ЗначениеИзСтрокиВнутр(ИсходноеЗначение);
	Исключение
		Значение = ИсходноеЗначение;
	КонецПопытки;
	Если JSON Тогда
		Значение = ПолучитьЗначениеJSON(Значение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураДанных.Вставить(Ключ, Значение);	
	КонецЕсли;

КонецПроцедуры

Функция СоздатьИЗаполнитьСоответствиеДанных(Знач Источник, Знач Свойства, JSON = Истина)
	
	СоответствиеДанных = Новый Соответствие;
	Для Каждого Свойство Из Свойства Цикл
		ДобавитьКлючИЗначение(Свойство.Имя, Источник, СоответствиеДанных, JSON);			
	КонецЦикла;
	Возврат СоответствиеДанных;

КонецФункции

Функция СоздатьИЗаполнитьСтруктуруДанных(Знач Источник, Знач Свойства, JSON = Истина) Экспорт
	
	СтруктураДанных = Новый Структура;
	Для Каждого Свойство Из Свойства Цикл
		ДобавитьКлючИЗначение(Свойство.Имя, Источник, СтруктураДанных, JSON);			
	КонецЦикла;
	Возврат СтруктураДанных;

КонецФункции

Функция СоздатьИЗаполнитьСтруктуруПоиска(Знач Источник, Знач Свойства)
	
	СтруктураПоиска = Новый Структура;
	Для Каждого Свойство Из Свойства Цикл
		Если ТипЗнч(Свойства) = Тип("Структура") Тогда
			Ключ = Свойство.Ключ;
		ИначеЕсли ТипЗнч(Свойства) = Тип("КоллекцияКолонокРезультатаЗапроса") Тогда
			Ключ = Свойство.Имя;
		КонецЕсли;
		
		Попытка
			СтруктураПоиска.Вставить(Ключ, Источник[Ключ]);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат СтруктураПоиска;

КонецФункции

Функция ПолучитьМассивСтруктурИзТаблицы(ТаблицаДанных)
	МассивДанных = Новый Массив;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтруктураДанных = СоздатьИЗаполнитьСтруктуруДанных(СтрокаДанных, ТаблицаДанных.Колонки);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	Возврат МассивДанных;
КонецФункции

Функция ПолучитьМассивСтруктурИзРезультатаЗапроса(РезультатЗапроса)
	МассивДанных = Новый Массив;
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтруктураДанных = СоздатьИЗаполнитьСтруктуруДанных(СтрокаДанных, ТаблицаДанных.Колонки);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	Возврат МассивДанных;
КонецФункции

Функция ПолучитьМассивСтруктурИзРезультатовРеквизиты(РезультатСсылки, РезультатРеквизиты)
	МассивДанных = Новый Массив;
	ВыборкаСсылки = РезультатСсылки.Выбрать();
	Пока ВыборкаСсылки.Следующий() Цикл
		СтруктураДанных = СоздатьИЗаполнитьСтруктуруДанных(ВыборкаСсылки, РезультатСсылки.Колонки);
		СтруктураПоиска = СоздатьИЗаполнитьСтруктуруПоиска(ВыборкаСсылки, РезультатРеквизиты.Колонки);
		ВыборкаРеквизиты = РезультатРеквизиты.Выбрать();
		Пока ВыборкаРеквизиты.НайтиСледующий(СтруктураПоиска) Цикл
			Ключ = СтрЗаменить(ТРег(ВыборкаРеквизиты.Ключ), " ", "");
			СтруктураДанных.Вставить(Ключ, ПолучитьЗначениеJSON(ВыборкаРеквизиты.Значение));
			//ДобавитьКлючИЗначение(Ключ, ВыборкаРеквизиты, СтруктураДанных);
		КонецЦикла;
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	Возврат МассивДанных;
КонецФункции

Функция ПолучитьЗначениеJSON(ИсходноеЗначение)
	ЗначениеJSON = Неопределено;
	
	Попытка
		Значение = ЗначениеИзСтрокиВнутр(ИсходноеЗначение);
	Исключение
		Значение = ИсходноеЗначение;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПростыеТипы = Новый ОписаниеТипов("Число, Строка, Дата, Булево");
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			ЗначениеJSON = ПолучитьМассивСтруктурИзТаблицы(Значение);
		Иначе			
			ЗначениеJSON = XMLСтрока(Значение);
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеJSON;
КонецФункции

Функция ПолучитьСтрокуJSON(ИсходноеЗначение) Экспорт
	НоваяЗаписьJSON = Новый ЗаписьJSON();
	НоваяЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(НоваяЗаписьJSON, ИсходноеЗначение);
	Возврат НоваяЗаписьJSON.Закрыть();
КонецФункции

// Функция создает новый документ в информационной базе.
//
Функция НайтиДокумент(ИмяДокумента, СтруктураДанных)
	
	Идентификатор = Новый УникальныйИдентификатор(СтруктураДанных.Ссылка);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

// Функция создает новый документ в информационной базе.
//
Функция НайтиСоздатьДокумент(ИмяДокумента, СтруктураДанных, НужноЗаписыватьОбъект)
	
	Идентификатор = Новый УникальныйИдентификатор(СтруктураДанных.Ссылка);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда 
		Объект = Документы[ИмяДокумента].СоздатьДокумент();	
		Объект.УстановитьСсылкуНового(Ссылка);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

// Функция создает новый справочник в информационной базе.
//
Функция НайтиСправочник(ИмяСправочника, СтруктураДанных)
	
	Идентификатор = Новый УникальныйИдентификатор(СтруктураДанных.Ссылка);
	Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	
	Возврат Объект;
	
КонецФункции // СоздатьСправочник()

Процедура ЗаполнитьРеквизитОбъекта(РеквизитОбъекта, РеквизитСтруктуры, НужноЗаписыватьОбъект, Справочник = Неопределено, Перечисление = Неопределено)
	
	Если Справочник <> Неопределено Тогда
		ОбъектРеквизит = НайтиСправочник(Справочник, Новый Структура("Ссылка", РеквизитСтруктуры)).Ссылка;
		Если РеквизитОбъекта <> ОбъектРеквизит Тогда
			РеквизитОбъекта = ОбъектРеквизит;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	ИначеЕсли Перечисление <> Неопределено Тогда
		ОбъектРеквизит = Перечисления[Перечисление][РеквизитСтруктуры];
		Если РеквизитОбъекта <> ОбъектРеквизит Тогда
			РеквизитОбъекта = ОбъектРеквизит;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	ИначеЕсли РеквизитОбъекта <> РеквизитСтруктуры Тогда
		РеквизитОбъекта = РеквизитСтруктуры;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСтрокуТабличнойЧасти(ТабличнаяЧасть, Отбор)
	СтрокаТабличнойЧасти = Неопределено;
	МассивСтрок = ТабличнаяЧасть.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	Возврат СтрокаТабличнойЧасти;
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьОбъекта(ТабличнаяЧасть, РеквизитСтруктуры, НужноЗаписыватьОбъект)
	
	ТабличнаяЧасть.Очистить();
	Для Каждого СтрокаТЧ Из РеквизитСтруктуры Цикл
		НоваяСтрокаТЧ = ТабличнаяЧасть.Добавить();
		
		Для Каждого КлючИЗначение Из СтрокаТЧ Цикл
			РеквизитОбъекта = НоваяСтрокаТЧ[КлючИЗначение.Ключ];
			Если ТипЗнч(РеквизитОбъекта) = Тип("Число") Тогда
				РеквизитОбъекта = КлючИЗначение.Значение;
			Иначе
				МетаданныеРеквизита = РеквизитОбъекта.Метаданные();
				ИмяМетаданныхРеквизита = МетаданныеРеквизита.Имя;
				Справочник = Неопределено;
				Перечисление = Неопределено;
				Если Метаданные.Справочники.Содержит(МетаданныеРеквизита) Тогда
					Справочник = ИмяМетаданныхРеквизита;
				ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеРеквизита) Тогда
					Перечисление = ИмяМетаданныхРеквизита;
				КонецЕсли;
				ЗаполнитьРеквизитОбъекта(РеквизитОбъекта, КлючИЗначение.Значение, Истина, Справочник, Перечисление);
			КонецЕсли;
			Если РеквизитОбъекта <> НоваяСтрокаТЧ[КлючИЗначение.Ключ] Тогда 
				НоваяСтрокаТЧ[КлючИЗначение.Ключ] = РеквизитОбъекта;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает документ в информацилнную базу.
//
Процедура ЗаписатьДокумент(Объект, СтруктураДанных, НужноЗаписыватьОбъект) Экспорт
	
	Если НЕ НужноЗаписыватьОбъект  Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Попытка
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
КонецПроцедуры // ЗаписатьДокумент()


#КонецОбласти